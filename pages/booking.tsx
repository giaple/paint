import Head from "next/head";
import Image from "next/image";
import { Inter } from "next/font/google";
import Link from "next/link";
import Loader from "../components/Loader";
import type { GetServerSideProps } from "next";
import { useRouter } from "next/router";
import { serverSideTranslations } from "next-i18next/serverSideTranslations";
import { useTranslation } from "next-i18next";
import Modal from "../components/Modal";
import { useState } from "react";
import Menu from "@/components/menu";
import NailItem from "@/components/booking/nailItem";
import DialogBooking from "../components/booking/dialog/dialogBooking";
import { ESortOrder, ItemModel } from "@/dataStructure";
import { useGetItems } from "@/graphQL/items";
import { useRecoilValue } from "recoil";
import addedItemsState from "@/recoil/cart/withCartItems";
import ShoppingCard from "@/components/ShoppingCard";

type Props = {
  // Add custom props here
};

function Booking() {
  const { t } = useTranslation("common");
  const router = useRouter();
  const changeTo = router.locale === "en" ? "vi" : "en";
  const [showModal, setShowModal] = useState(false);
  const addedItems = useRecoilValue(addedItemsState)

  const {getItemsError, getItemsFetchMore, getItemsRefetch, getItemsResult, getItemsStatus} = useGetItems({ variables: { paginationInput: {
    limit: 3,
    pageNumber: 1,
    sortOrder: ESortOrder.Asc
  },
  optionInput: {
      isGetAll: true
  } } });

  const onToggleLanguageClick = (newLocale: string) => {
    const { pathname, asPath, query } = router;
    router.push({ pathname, query }, asPath, {
      locale: newLocale,
      scroll: false,
    });
  };

  const [isOpenDialog, setIsOpenDialog] = useState(false)
  const [selectedCombo, setSelectedCombo] = useState<ItemModel>()

  const handleOpenDialog = (item: ItemModel) => {
    setSelectedCombo(item)
    setIsOpenDialog(true)
  }

  return (
    <div className="wrapper" style={{ position: "relative" }}>
      <Head>
        <title>Nook Nails - Làm nail tại nhà theo cách của bạn</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <link rel="icon" href="/favicon.svg" />
        <link
          rel="stylesheet"
          href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css"
        />
        <link
          href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css"
          rel="stylesheet"
        />
      </Head>
      <Loader />
      <Menu onToggleLanguageClick={onToggleLanguageClick} />
      <section id="booking-service">
        <div className="container booking-services-container">
          <div className="introduce-services">
            <div>
              <div className="title">
                <span>Dịch vụ làm nails tại nhà</span>
              </div>
              <div className="introduce-services-item">
                <div>
                  <Image
                    className="start-icon"
                    src="/images/icons/star-yellow.svg"
                    alt=""
                    width={26}
                    height={26}
                  />
                  <span>SƠN GEL</span>
                </div>
                <span>Chất lượng</span>
              </div>
              <div className="introduce-services-item">
                <div>
                  <Image
                    className="start-icon"
                    src="/images/icons/star-yellow.svg"
                    alt=""
                    width={26}
                    height={26}
                  />
                  <span>PHÍ ĐI LẠI</span>
                </div>
                <span>Miễn phí</span>
              </div>
              <div className="introduce-services-item">
                <div>
                  <Image
                    className="start-icon"
                    src="/images/icons/star-yellow.svg"
                    alt=""
                    width={26}
                    height={26}
                  />
                  <span>BẢO HÀNH NAILS</span>
                </div>
                <span>3 ngày</span>
              </div>
              <div className="introduce-services-item">
                <div>
                  <Image
                    className="start-icon"
                    src="/images/icons/star-yellow.svg"
                    alt=""
                    width={26}
                    height={26}
                  />
                  <span>THIẾT KẾ GIỐNG MẪU</span>
                </div>
                <span>Đến 90%</span>
              </div>
            </div>
          </div>
          <div className="introduce-services-clip">
            <video
              itemProp="video"
              // itemScope=""
              itemType="http://schema.org/VideoObject"
              width={700}
              height="auto"
              autoPlay={true}
              muted={true}
              loop={true}
            >
              <source src="/videos/booking.mp4" type="video/mp4" />
              <meta itemProp="duration" content="T1M30S" />
              <meta
                itemProp="thumbnailUrl"
                content="https://nails.workwithnook.com/assets/images/thumbnails/video.jpg"
              />
              <meta
                itemProp="uploadDate"
                content="2023-04-14T10:00:00-08:00"
              />
            </video>
          </div>
        </div>
      </section>

      <section id="booking-items">
        <div className="container booking-items-contaier">
          <div className="title"><span>Chọn combo & Đặt lịch</span></div>
          <div className="item-combo">

            {getItemsError || getItemsStatus ? <Loader /> : 
              <>
                {getItemsResult?.itemSearch?.nodes.map((item: ItemModel, index: number) => (<NailItem disabled={!!addedItems.find(addedItem => addedItem._id === item._id)} key={index} item={item} handleOpenDialog={() => handleOpenDialog(item)} />))}
              </>
            }

            
          </div>
        </div>

      </section>
      {
        isOpenDialog && <DialogBooking
          isOpenDialog={isOpenDialog}
          setIsOpenDialog={setIsOpenDialog}
          data={selectedCombo}
        />
      }
      <ShoppingCard/>
    </div>
  );
}

export const getServerSideProps = async ({ locale }: { locale: string }) => {
  return {
    props: {
      ...(await serverSideTranslations(locale ?? "vi", ["common"])),
    }, // will be passed to the page component as props
  };
};

export default Booking;
